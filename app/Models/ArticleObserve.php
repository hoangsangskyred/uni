<?php

namespace App\Models;

use GuzzleHttp\Exception\RequestException;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\UriInterface;
use Spatie\Crawler\CrawlObserver;

class ArticleObserve extends CrawlObserver
{
    use HasFactory;

    public $article;
    public $doc;

    public function __construct(Article $article = null)
    {
        $this->article = $article ? $article : new Article();
    }

    public function willCrawl(UriInterface $url)
    {
        parent::willCrawl($url); // TODO: Change the autogenerated stub
    }

    public function crawled(UriInterface $url, ResponseInterface $response, ?UriInterface $foundOnUrl = null)
    {
        // TODO: Implement crawled() method.
        $path = $url->getPath();
        $this->doc = new \DOMDocument();
        @$this->doc->loadHTML($response->getBody());
        /*foreach($this->field_maps as $field => $field_map) {
            if ($field_map['getBy'] == 'tagName') {
                $element = $this->doc->getElementsByTagName($field_map['name'])[$field_map['orderNo']];
            } else {
                $element = $this->doc->getElementById($field_map['name']);
            }
            if ($element)
                $this->article->$field = $element->nodeValue;
        }*/
    }

    public function crawlFailed(UriInterface $url, RequestException $requestException, ?UriInterface $foundOnUrl = null)
    {
        // TODO: Implement crawlFailed() method.
    }

    public function getResult()
    {
        return $this->article;
    }
}
